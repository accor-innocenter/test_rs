var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
let sessionId = 0;
export default class Session {
    constructor() {
        this.mqtt = global['SnipsToolkit'].setup.mqttClient;
        this.sessionId = '' + sessionId++;
    }
    reset() {
        this.sessionId = '' + sessionId++;
    }
    subscribe(topic) {
        return new Promise((resolve, reject) => {
            this.mqtt.subscribe(topic, err => {
                err ? reject(err) : resolve();
            });
        });
    }
    unsubscribe(topic) {
        return new Promise((resolve, reject) => {
            this.mqtt.unsubscribe(topic, err => {
                err ? reject(err) : resolve();
            });
        });
    }
    publishMessage(_a) {
        var { intentName, input } = _a, additionalFields = __rest(_a, ["intentName", "input"]);
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => {
                this.mqtt.publish(`hermes/intent/${intentName}`, JSON.stringify(Object.assign({ sessionId: this.sessionId, siteId: 'default', intent: {
                        intentName,
                        confidenceScore: 1
                    }, asrTokens: [], slots: [], input }, additionalFields)), resolve);
            });
        });
    }
    nextMessage() {
        return new Promise(resolve => this.mqtt.once('message', (topic, message) => {
            resolve([topic, JSON.parse(message.toString())]);
        }));
    }
    start(_a) {
        var { intentName, input } = _a, additionalFields = __rest(_a, ["intentName", "input"]);
        return __awaiter(this, void 0, void 0, function* () {
            if (!input || !intentName) {
                throw new Error('input and intentName fields are required');
            }
            // Subscribe to the continueSession/endSession callbacks
            yield this.subscribe('hermes/dialogueManager/continueSession');
            yield this.subscribe('hermes/dialogueManager/endSession');
            // Publish an intent message
            this.publishMessage(Object.assign({ intentName, input }, additionalFields));
        });
    }
    continue(_a) {
        var { intentName, input } = _a, additionalFields = __rest(_a, ["intentName", "input"]);
        return __awaiter(this, void 0, void 0, function* () {
            if (!input || !intentName) {
                throw new Error('input and intentName fields are required');
            }
            // Wait for the continue session message
            const [topic, message] = yield this.nextMessage();
            // Asserts
            expect(topic).toBe('hermes/dialogueManager/continueSession');
            expect(message.sessionId).toBe(this.sessionId);
            // Publish an intent message
            this.publishMessage(Object.assign({ intentName, input }, additionalFields));
            return message;
        });
    }
    end() {
        return __awaiter(this, void 0, void 0, function* () {
            // Wait for the end session message
            const [topic, message] = yield this.nextMessage();
            // Asserts
            expect(topic).toBe('hermes/dialogueManager/endSession');
            expect(message.sessionId).toBe(this.sessionId);
            yield this.unsubscribe('hermes/dialogueManager/continueSession');
            yield this.unsubscribe('hermes/dialogueManager/endSession');
            return message;
        });
    }
}
//# sourceMappingURL=session.js.map